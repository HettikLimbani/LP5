#include <iostream>
//#include <vector>
#include <omp.h>
#include <climits>
using namespace std;

// Function to find the minimum value in the array using OpenMP reduction
void min_reduction(int arr[], int n) {
  int min_value = INT_MAX;
  // Parallel loop with reduction clause to find the minimum value
  #pragma omp parallel for reduction(min: min_value)
  for (int i = 0; i < n; i++) {
	if (arr[i] < min_value) {
  	min_value = arr[i];
	}
  }
  cout << "Minimum value: " << min_value << endl;
}

// Function to find the maximum value in the array using OpenMP reduction
void max_reduction(int arr[], int n) {
  int max_value = INT_MIN;
  // Parallel loop with reduction clause to find the maximum value
  #pragma omp parallel for reduction(max: max_value)
  for (int i = 0; i < n; i++) {
	if (arr[i] > max_value) {
  	max_value = arr[i];
	}
  }
  cout << "Maximum value: " << max_value << endl;
}

// Function to find the sum of all elements in the array using OpenMP reduction
void sum_reduction(int arr[], int n) {
  int sum = 0;
  // Parallel loop with reduction clause to find the sum
   #pragma omp parallel for reduction(+: sum)
   for (int i = 0; i < n; i++) {
	sum += arr[i];
  }
  cout << "Sum: " << sum << endl;
}

// Function to find the average of all elements in the array using OpenMP reduction
void average_reduction(int arr[], int n) {
  int sum = 0;
  // Parallel loop with reduction clause to find the sum
  #pragma omp parallel for reduction(+: sum)
  for (int i = 0; i < n; i++) {
	sum += arr[i];
  }
  // Calculate the average
  cout << "Average: " << (double)sum / n << endl;
}

int main() {
    int *arr,n;
    cout<<"\n enter total no of elements=>";
    cin>>n;
    arr=new int[n];
    cout<<"\n enter elements=>";
    for(int i=0;i<n;i++)
    {
   	 cin>>arr[i];
    }

  // Function calls to perform reductions
  min_reduction(arr, n);
  max_reduction(arr, n);
  sum_reduction(arr, n);
  average_reduction(arr, n);
}


















/*
Input:Enter total no of elements=> 5
Enter elements=> 10 5 8 3 6
Minimum value: 3
Maximum value: 10
Sum: 32
Average: 6.4



Explanation:

The code demonstrates the use of OpenMP reduction clauses to perform common reduction operations such as finding the minimum, maximum, sum, and average of elements in an array.
Each reduction operation is implemented as a separate function (min_reduction, max_reduction, sum_reduction, average_reduction).
Inside each function, a parallel loop is used with the reduction clause to perform the reduction operation concurrently across multiple threads.
OpenMP handles the reduction operation by aggregating results from individual threads, ensuring correctness and efficiency.




OpenMP provides the reduction clause to simplify the implementation of parallel reduction. The syntax of the reduction clause is as follows:

cpp
Copy code
#pragma omp parallel for reduction(operation: reduction_variable)

operation specifies the reduction operation to be performed (e.g., +: for addition, min: for finding the minimum value, max: for finding the maximum value).
reduction_variable is the variable that will hold the result of the reduction operation.
*/