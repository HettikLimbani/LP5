#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Graph class representing the adjacency list
class Graph {
    int V;  // Number of vertices
    vector<vector<int>> adj;  // Adjacency list

public:
    Graph(int V) : V(V), adj(V) {}

    // Add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }

    // Parallel Depth-First Search
    void parallelDFS(int startVertex) {
        vector<bool> visited(V, false);
        parallelDFSUtil(startVertex, visited);
    }

    // Parallel DFS utility function
    void parallelDFSUtil(int v, vector<bool>& visited) {
        visited[v] = true;
        cout << v << " ";

        #pragma omp parallel for //OpenMp directive 
// OpenMp --> API for parallel processing.
        for (int i = 0; i < adj[v].size(); ++i) {
            int n = adj[v][i];
            if (!visited[n])
                parallelDFSUtil(n, visited);
        }
    }

    // Parallel Breadth-First Search
    void parallelBFS(int startVertex) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
            int v = q.front();
            q.pop();
            cout << v << " ";

            #pragma omp parallel for
            for (int i = 0; i < adj[v].size(); ++i) {
                int n = adj[v][i];
                if (!visited[n]) {
                    visited[n] = true;
                    q.push(n);
                }
            }
        }
    }
};

int main() {
    // Create a graph
    int n, m, start_node;
    cout << "Enter No of Node, Edges, and start node: ";
    cin >> n >> m >> start_node;
    
    Graph g(n);
    
    cout << "Enter Pair of edges: ";
    for(int i = 0; i < m; i++){
        int u, v;
        cin >> u >> v;
        g.addEdge(u, v);
    }
    
    cout << "Depth-First Search (DFS): ";
    g.parallelDFS(start_node);
    cout << endl;

    cout << "Breadth-First Search (BFS): ";
    g.parallelBFS(start_node);
    cout << endl;

    return 0;
}





//////////////////////////////////////////////////////////////////////////////////////////////////////
/*
Input:
5 4 0
0 1
0 2
1 3
1 4




# Explaination:
The code defines a Graph class representing an undirected graph using an adjacency list representation.
addEdge function adds an edge between two vertices in the graph.
parallelDFS function initiates a parallel depth-first search traversal of the graph starting from a specified vertex.
parallelDFSUtil is a utility function for parallel depth-first search. It recursively traverses the graph depth-first.
parallelBFS function initiates a parallel breadth-first search traversal of the graph starting from a specified vertex.
In the main function:
User is prompted to enter the number of nodes, edges, and the starting node.
User inputs pairs of edges.
Depth-first search (DFS) and breadth-first search (BFS) are performed on the graph starting from the specified node.

*/
